generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model migrations {
  id        Int    @id @default(autoincrement())
  timestamp BigInt
  name      String @db.VarChar(255)
}

model Person {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(250)
  birthAt   DateTime? @db.Date
  phone     String?   @db.VarChar(16)
  document  String?   @db.VarChar(14)
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @default(now()) @db.DateTime(0)
  User      User[]

  @@map("persons")
}

model User {
  id               Int                @id @default(autoincrement())
  email            String             @unique(map: "UQ_97672ac88f789774dd47f7c8be3") @db.VarChar(250)
  password         String             @db.VarChar(250)
  photo            String?            @db.VarChar(255)
  personId         Int
  createdAt        DateTime           @default(now()) @db.DateTime(0)
  updatedAt        DateTime           @default(now()) @db.DateTime(0)
  person           Person             @relation(fields: [personId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_users_persons")
  PasswordRecovery PasswordRecovery[] @relation("password_recoveriesTousers")

  @@index([personId], map: "FK_users_persons")
  @@map("users")
}

model PasswordRecovery {
  id        Int       @id @default(autoincrement())
  token     String    @db.VarChar(255)
  userId    Int
  resetAt   DateTime? @db.DateTime(0)
  createdAt DateTime  @default(now()) @db.DateTime(0)
  updatedAt DateTime  @default(now()) @db.DateTime(0)
  user      User      @relation("password_recoveriesTousers", fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "FK_password_recoveries_users")

  @@index([userId], map: "FK_password_recoveries_users")
  @@map("password_recoveries")
}
